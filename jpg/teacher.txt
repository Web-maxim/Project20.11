Уважаемый Глебов Евгений Александрович!

1. Хранение настроек (ответ на комментарий к прошлой моей работы)
Ваше замечание я учёл. В проекте используется отдельный файл конфигурации config.txt, где хранятся:

IP-адрес сервера (ip),

порт (port),

пути к вспомогательным файлам (пользователи, сообщения, словарь).

Файл загружается при запуске, что позволяет удобно менять настройки без перекомпиляции программы.

2. Реализация сетевого чата (тема 20.11. Задание по итогам модуля)
Цель работы выполнена: чат был доработан до сетевого уровня.

Выбрана архитектура клиент–сервер.

Используется TCP-соединение (более надёжное для передачи текста).

Сервер принимает несколько клиентов, каждому назначается логин.

Клиенты могут обмениваться сообщениями через сервер в реальном времени.

Программа запускается в трёх режимах:

локальный чат (консольная версия для одного пользователя),

сервер,

клиент.

3. Задание повышенной сложности (*) — кроссплатформенность
В проекте частично учтена поддержка Windows и Linux:

Использованы условные компиляционные блоки #ifdef _WIN32 для подключения разных библиотек сокетов (winsock2.h в Windows и <sys/socket.h> в Linux).

Определены универсальные типы SOCKET, INVALID_SOCKET, SOCKET_ERROR для выравнивания различий между платформами.

Таким образом, большая часть кроссплатформенной основы уже реализована.
Чтобы довести до полноценного кроссплатформенного проекта, в будущем предполагается:

отладить сборку и запуск в Linux (например, через g++),

использовать CMake для удобства сборки под разные ОС,

протестировать корректность работы ввода/вывода в консоли (особенно для русского текста).